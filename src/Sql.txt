CREATE
객체를 생성하는 데이터 정의 언어(DDL) 명령이다.

CREATE TABLE 테이블명
(
	항목명	타입
	항목명	타입	null,
	항목명	타입	not null,
	항목명	타입	primary key
);

CREATE DATEBASE
데이터베이스를 생성한다.

CREATE INDEX
인덱스를 생성한다.
CREATE VIEW
뷰를 생성한다.

CREATE StoredProcedure
저장프로시저를 생성한다.
@@
DROP
데이터베이스, 테이블, 인덱스, 뷰를 삭제한다.
DROP TABLE 테이블명;
@@
ALTER
이미 존재하는 개체의 특성을 변경하는 데이터 정의 언어(DDL) 명령이다.

ALTER TABLE 테이블명 ADD 항목명 타입;
	테이블에 새로운 항목를 생성한다.
ALTER TABLE 테이블명 DROP COLUMN 항목명;
	테이블에 존재하는 항목을 삭제한다.
ALTER TABLE (old)테이블명 RENAME TO (new)테이블명
	테이블명 변경은 RENAME을 사용한다.
@@
INSERT
테이블 또는 뷰에 한개 이상의 행을 추가한다.

INSERT INTO 테이블명or뷰이름 (항목1, 항목2) VALUES(값1, 값2);
INSERT INTO 테이블명or뷰이름 VALUES(값1, 값2);
@@
DELETE
테이블 또는 뷰에서 한개 이상의 행을 삭제한다.
하위 집합은 삭제에 대한 조건을 정의할 수 있으며, 정의하지 않으면 모든 행이 삭제된다.

DELETE FROM 테이블명or뷰이름 WHERE 조건;

DELETE 문을 실행하는 것은 다른 테이블을 삭제하게끔 실행하는 트리거가 발생할 수 있다. 
예를 들면 두 테이블이 외래 키로 연결되어 있고 행이 참조된 테이블에서 삭제된다면,
참조 무결성이 유지되도록 참조하고 있는 테이블에도 공통적으로 삭제된다.

DELETE FROM 테이블명;
	테이블의 모든 행을 삭제한다.
DELETE FROM 테이블명 WHERE 항목명=(조건);
	테이블에서 조건과 같은 행들을 삭제한다.
DELETE FROM 테이블명 WHERE 항목명 < 80;
	테이블에서 80보다 작은 행들을 삭제한다.
DELETE FROM 테이블명 WHERE 항목명 in (값1, 값2);
	테이블에서 값1,값2의 행을 삭제한다.
DELETE FROM 테이블명1 WHERE 항목명1 in (SELECT 항목명2 FROM 테이블명2);
	테이블1에서 테이블2의 항목명2와 같은 항목명1의 행들을 삭제한다.
@@
UPDATE
테이블이나 뷰에서 한 개 이상의 행을 바꾼다. 
모든 행을 변경해야 되는 경우도 조건절을 사용하여 하위 집합을 선택할 수 있다.

UPDATE 테이블명 SET 항목명1 = 값1 WHERE 항목명2 = 값2;
	테이블에서 항목명2가 값2와 같다면 해당 행들의 항목명1 = 값1
UPDATE 테이블명 SET 항목명1 = 값1, 항목명2 = 값2 WHERE 항목명3 = 값3;
	테이블에서 항목명3이 값3과 같다면 해당 행들의 항목명1 = 값1, 항목명2 = 값2;
@@
MERGE
조건에 따라 UPDATE 또는 INSERT를 실행한다. 
UPDATE 및 INSERT를 결합한 작업을 수행하기 때문에 UPSERT라는 별명을 가지고 있다.

MERGE INTO 테이블명 USING 서브테이블명 ON (병합조건 ex.테이블명.id = 서브테이블명.id)
WHEN MATCHED THEN
	UPDATE SET 항목1 = 값1 [, 항목2 = 값2 ...]
WHEN NOT NATCHED THEN
	INSERT (항목1 [,항목2 ....] VALUES (값1 [,값2 ....])

병합조건에 맞는 행이 있으면 UPDATE를 하고 그렇지 않으면 INSERT를 한다.
@@
JOIN
교차 조인 (CROSS JOIN)
SELECT * FROM 테이블명1 CROSS JOIN 테이블명2;
두 테이블의 곱집합이 반환된다. (ex. m행의 테이블 n행의 테이블이 교차 조인 되면 m*n개의 행)

내부 조인 (INNER JOIN)
SELECT * FROM 테이블명1 INNER JOIN 테이블명2
on 테이블명1.항목명 = 테이블명2.항목명;	
두 테이블의 항목이 일치하는 행만 반환된다.

외부 조인(OUTER JOIN)
left outer join, right out join, full outer join
	
@@
TRUNCATE
테이블에서 모든 행을 삭제하는 데이터 정의 언어(DDL)이다. 
데이터베이스가 가지고 있는 무결성을 유지하는 메커니즘을 생략하여 빠른 제거를 실현하고 있는 경우가 많다. 
삭제할 행 각각을 기록하는 트랜잭션 로그의 출력을 방지함으로써 효율적으로 모든 행을 삭제할 수 있다.

DELETE FROM 테이블명과 거의 동일하지만 다음과 같은 점에서 다르다.
1. WHERE 절을 지정할 수 없다. 모든 행은 일괄 삭제된다.
2. 대상 테이블 단독 잠금을 얻을 수 있다.	
외래 키에서 참조되는 테이블에서 실행할 수 없다. 외래 키의 무결성을 확인하지 않기 때문이다.
3. Oracle Database와 MySQL의 일부 스토리지 엔진은 TRUNCATE 후 자동으로 커밋을 한다.(rollback 안됨)
4. PostgreSQL 처럼 트랜잭션 내에서 실행할 수 있으며, 롤백이 가능한 데이터베이스도 존재한다.	
5. Microsoft SQL Server에서는 복제 및 로그 전달 대상이 되고 있는 테이블에 대해 실행할 수 없다. 
모두 원격 데이터베이스의 일관성을 유지하기 위해 트랜잭션 로그를 이용하기 때문이다.

TRUNCATE TABLE 테이블명 [, 테이블명]
테이블의 모든 행을 삭제한다.
@@
WHERE
특정한 기준을 충족하는 행(row)에만 영향을 미치도록 지정한다.
SELECT * FROM 테이블명 WHERE [조건];
@@
SAVEPOINT
트랜잭션의 특정 지점에 이름을 지정하고, 그 지점 이전에 수행 한 작업에 영향을 주지 않고 그 지점 
이후에 수행한 작업을 롤백(ROLLBACK)할 수 있다. 단일 트랜잭션에서 여러 SAVEPOINT를 만들 수도 있다.

 INSERT INTO 테이블명 VALUES (1);
SAVEPOINT savepoint_example;
  INSERT INTO 테이블명 VALUES (2);
ROLLBACK TO SAVEPOINT savepoint_example;
 INSERT INTO 테이블명 VALUES (3);

(1)INSERT후 SAVEPOINT지정, (2)INSERT후 ROLLBACK, (3)INSERT
(1)번과 (3)번만 INSERT된다.
@@
SELECT
지정 열을 보여준다. *로 하면 모든 열이 표시된다. 산술 연산자, 그룹 함수를 사용할 수 있다.
@@
FROM
FROM 절에서 열 참조를 가진 테이블을 지정한다. 여러 테이블을 지정 할 수도 있다.
또한, 표를 필요로 하지 않는 쿼리를 할 경우에도 DUAL 테이블과 같은 더미 표를 지정하는 것이 가능하지만,
이러한 경우 FROM을 생략 할 수 있는 확장이 행해진 처리계도 많이 존재한다.
@@
WHERE
데이터를 추출하는 선택 조건식을 지정한다. 
단일 식을 이용하는 것 외에도 여러 조건을 조회하는 경우도 많다. 
또한 테이블 간의 결합할 때 그 결합 관계를 지정한다. 
이 WHERE 절에 그룹 함수를 사용해서는 안된다는 규칙이 존재한다.
@@
GROUP BY
그룹화 열 또는 항목명을 포함하는 식을 지정한다.
또한 SELECT문의 GROUP BY절에서 그룹 함수를 제외하고 그룹화되지 않은 열이 존재하면 함께 작성해야 한다.
	ex1. SELECT A. B FROM LIST GROUP BY A;	오류
	ex2. SELECT A. B FROM LIST GROUP BY A, B;	정상
GROUP BY 절을 포함하면 뷰를 만들 수 없다. 
(SELECT 문에서 그룹 함수를 사용하는 경우 또는 DISTINCT 절을 사용하는 경우에도 동일)
@@
HAVING
HAVING 절은 GROUP BY 절에 집계한 결과에 조건을 정해줄 때 사용한다. 
그룹 함수의 사용이 가능하다. 순서는 GROUP BY 절과 전후가 되어도 상관없다.
@@
ORDER BY
정렬할 컬럼 또는 컬럼을 포함하는 식을 지정하는 것으로 어떠한 경우에도 구문의 마지막에 지정한다. 
쉼표로 구분하여 여러 열을 지정할 수 있다. 
일반적으로 ASC (ascending order), 즉 오름차순 지정이며, 내림차순 지정하려면 DESC (descending order)로 표기한다. 
또한 열 이름으로 지정이 가능하며, 서수 지정이 가능하다. (예를 들어, 두 번째 열에서 참조하고 싶은 경우, ORDER BY 2로 할 수 있다.)
여기에서 NULL은 무한대의 값으로 간주되어, 오름차순의 경우는 마지막에, 내림차순 경우 처음에 표시된다.
@@